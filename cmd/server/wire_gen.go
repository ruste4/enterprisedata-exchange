// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"database/sql"
	"enterprisedata-exchange/internal/config"
	"enterprisedata-exchange/internal/domain/repository"
	"enterprisedata-exchange/internal/domain/service"
	"enterprisedata-exchange/internal/repository/sqlite"
	"enterprisedata-exchange/internal/usecase"
	"enterprisedata-exchange/pkg/database"
	"enterprisedata-exchange/pkg/logger"
	"github.com/google/wire"
	"log/slog"
)

// Injectors from wire.go:

func InitExchangeService() (*service.ExchangeNodeService, func(), error) {
	config, cleanup, err := providerConfig()
	if err != nil {
		return nil, nil, err
	}
	logger, cleanup2, err := providerLogger(config)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	db, cleanup3, err := providerDBConnect(config)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	exchangeNodeSqliteRepository, cleanup4, err := providerExchangeNodeRepository(logger, db)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	exchangeNodeService := service.NewExchangeNodeService(logger, exchangeNodeSqliteRepository)
	return exchangeNodeService, func() {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

func InitUseCase() (*usecase.ExchangeUseCase, func(), error) {
	config, cleanup, err := providerConfig()
	if err != nil {
		return nil, nil, err
	}
	logger, cleanup2, err := providerLogger(config)
	if err != nil {
		cleanup()
		return nil, nil, err
	}
	db, cleanup3, err := providerDBConnect(config)
	if err != nil {
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	exchangeNodeSqliteRepository, cleanup4, err := providerExchangeNodeRepository(logger, db)
	if err != nil {
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	exchangeNodeService := service.NewExchangeNodeService(logger, exchangeNodeSqliteRepository)
	fileService, cleanup5, err := providerFileService(config, logger)
	if err != nil {
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
		return nil, nil, err
	}
	exchangeUseCase := usecase.NewExchangeNodeUseCase(config, logger, exchangeNodeService, fileService)
	return exchangeUseCase, func() {
		cleanup5()
		cleanup4()
		cleanup3()
		cleanup2()
		cleanup()
	}, nil
}

// wire.go:

var BaseSet = wire.NewSet(
	providerConfig,
	providerLogger,
	providerDBConnect, wire.Bind(new(repository.ExchangeNodeRepository), new(*sqliteRep.ExchangeNodeSqliteRepository)), providerExchangeNodeRepository,
)

func providerFileService(cfg *config.Config, log *slog.Logger) (*service.FileService, func(), error) {
	return service.NewFileService(cfg, log), nil, nil
}

func providerConfig() (*config.Config, func(), error) {
	return config.MustLoad(), nil, nil
}

func providerLogger(cfg *config.Config) (*slog.Logger, func(), error) {
	return logger.SetupLogger(cfg.Env), nil, nil
}

func providerDBConnect(cfg *config.Config) (*sql.DB, func(), error) {
	conn, err := database.Connect(cfg)
	return conn, nil, err
}

func providerExchangeNodeRepository(log *slog.Logger, db *sql.DB) (*sqliteRep.ExchangeNodeSqliteRepository, func(), error) {
	return sqliteRep.NewExchangeNodeSqliteRepository(log, db), nil, nil
}
